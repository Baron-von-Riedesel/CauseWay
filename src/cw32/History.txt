
   __.__.____: v5.1

   - fixed: both raw mode switches cleared IF.
   - fixed: int 31h, ax=301h/302h called real-mode with IF=0, ignoring
     the flags field in real-mode call structure.
   - int 31h, ax=500h: return max from VCPI/XMS as free physical memory.
   - cw32.asm: switch STDKERNELSS set to 1 again.
   - support for GDT selectors 0A000h, 0B000h, 0B800h disabled.
   - fixed: align stack to dword for internal callbacks (IRQ/Int 1C,23,24).


   26.03.2025: v5.0

   - adjusted source so OPTION OLDSTRUCTS isn't necessary.
   - added "wdeb386 int 68h" interface to kernel debugger.
   - removed "double 0x66" prefixes for IRET/RETF.
   - segment register moves changed to 32-bit in 32-bit code segments.
   - added ALIGNs in data segments to avoid unaligned accesses.
   - generally avoid (register) WORD pushes in 32-bit segments so stack
     remains 32-bit aligned.
   - data in code segments moved to data segments.
   - fixed: emulation of DPMI functions 090x.
   - int 41h "protected-mode debugger API": ensure that interrupt isn't
     reflected to real-mode.
   - invalid opcode fault wasn't reported as exception, but as interrupt only;
     changed to be a true exception (#06).
   - fixed: emulation of DPMI functions 0300h-0302h did modify BX register.
   - fixed: int 31h, ax=0000 always returned with NC, although function might
     have failed.
   - UMBs are now also preferably used in DPMI mode.
   - if DOS memory blocks needed by CW itself couldn't be allocated in an UMB,
     they're now located in space used by segments that were moved to extended
     memory. This should avoid scattering of DOS memory.
   - _cwInit segment moved from last segment to just behind _cwRaw. This
     allows to put _cwMain, _cwRaw and _cwInit in a group, thus reducing
     segment register moves.
   - fixed: handling exceptions in raw/vcpi mode (interrup.asm) did finally
     jump to InitError(), which is located in _cwInit and hence not present
     when the application runs.
   - fixed: address space handling in raw/vcpi mode (memory.asm) ignored an
     overflow, resulting in a freeze or reboot.
   - fixed: unhandled DPMI functions were routed to real-mode in raw/vcpi mode.
   - DPMI function 306h (return raw mode switch addresses) implemented.
   - trace log writes (macro @dprintf) added.
   - fixed: DPMI emulator func 0001 (release descriptor) always returned
     with NC.
   - significant binary size reduction: compressed binary (CWSTUB.EXE) now
     40 kB (was 46.5), uncompressed binary (CW32.EXE) now 72 kB (was 94). 
   - fixed: all DPMI descriptor functions got some validity checks so they
     should fail for an invalid selector argument in BX.
   - fixed: no swapfile-related DOS access if indos flag is set.
   - default value for LOWMEM is now 256kB; previously the value entered was
     added to a minimum of 32 kB.
   - removed restriction that cw32.exe/cwstub.exe can only launch a 32-bit
     application.
   - fixed: copy FCBs in int 21h, ax=4B00h emulation; code still optional.
   - various fixes for emulation of int 31h, ax=800h (map physical memory).
   - DPMI functions 0x10x: removed allocation of an extra paragraph that was
     used to store block size.
   - fixed DPMI functions 0x10x: no selector tiling for 32-bit apps.
   - DPMI functions 0x102: expanding DOS memory block implemented for 32-bit.
   - fixed DOS extender int 21h, ah=48h/4Ah: in DOS/4G mode, EBX is supposed
     to hold (new) size of requested memory in paragraphs.
   - kernel exports for dll support deactivated as default. They're no longer
     needed, since the CauseWay API now directly supports LoadModule,
     GetProcAddress, FreeModule.
   - fixed DOS extender int 21h, ah=38h: case map routine was supposed to be
     translated, but actually wasn't.
   - int 31h, ax=801h (unmap physical memory) implemented (DOS/4G compatible).
